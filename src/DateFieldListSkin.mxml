<?xml version="1.0" encoding="utf-8"?>
<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.
 
--> 
<!--- The default skin class for the Spark DropDownList component. 
      The skin for the anchor button for a DropDownList component 
      is defined by the DropDownListButtonSkin class.  
      
      <p>In a custom skin class that uses transitions, set the 
      <code>itemDestructionPolicy</code> property to <code>none</code>
      for the PopUpAnchor defined by the popUp property.</p>      
        
      @see spark.components.DropDownList        
      @see spark.skins.spark.DropDownListButtonSkin
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009" xmlns:local="*" alpha.disabled=".5" minWidth="150"> 

    <!-- host component -->
    <fx:Metadata>
    <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.DropDownList")]
    ]]>
    </fx:Metadata> 

    <fx:Script fb:purpose="styling">
        <![CDATA[            
            
            /* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
            static private const contentFill:Array = ["bgFill"];
            
            /**
             * @private
             */
            override public function get contentItems():Array {return contentFill};
                        /**
             * @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
            {
                if (getStyle("borderVisible") == false)
                {
                    if (border)
                        border.visible = false;
                    if (background)
                    {
                        background.left = background.top = background.right = background.bottom = 0;
                    }
					if (datechooser)
					{
						datechooser.left = datechooser.top = datechooser.right = datechooser.bottom = 0;
					}
                }
                else
                {
                    if (border)
                        border.visible = true;
                    if (background)
                    {
                        background.left = background.top = background.right = background.bottom = 1;
                    }
					if (datechooser)
					{
						datechooser.left = datechooser.top = datechooser.right = datechooser.bottom = 1;
					}
                }
                
                if (dropShadow)
                    dropShadow.visible = getStyle("dropShadowVisible");
                
                openButton.setStyle("cornerRadius", getStyle("cornerRadius"));
                
                if (borderStroke)
                {
                    borderStroke.color = getStyle("borderColor");
                    borderStroke.alpha = getStyle("borderAlpha");
                }
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }

			private function prevMonth():void
			{
                var foo:CalendarIList = dataGroup.dataProvider as CalendarIList;
				if (foo.month == 0)
				{
					foo.setMonthAndYear(11, foo.year - 1);
				}
				else
				{
					foo.setMonthAndYear(foo.month - 1, foo.year);
				}
			}
			
			private function nextMonth():void
			{
                var foo:CalendarIList = dataGroup.dataProvider as CalendarIList;
				if (foo.month == 11)
				{
					foo.setMonthAndYear(0, foo.year + 1);
				}
				else
				{
					foo.setMonthAndYear(foo.month + 1, foo.year);
				}
			}
					
		]]>
    </fx:Script>
 
    <s:states>
        <s:State name="normal" />
        <s:State name="open" />
        <s:State name="disabled" />
    </s:states>
    
    <!--- 
        The PopUpAnchor control that opens the drop-down list. 
        
        <p>In a custom skin class that uses transitions, set the 
        <code>itemDestructionPolicy</code> property to <code>none</code>.</p>
    -->
    <s:PopUpAnchor id="popUp"  displayPopUp.normal="false" displayPopUp.open="true" includeIn="open"
        left="0" right="0" top="0" bottom="0" itemDestructionPolicy="auto"
        popUpPosition="below" popUpWidthMatchesAnchorWidth="true">
        
        <!--- 
              This includes borders, background colors, scrollers, and filters.
              @copy spark.components.supportClasses.DropDownListBase#dropDown
        -->
        <s:Group id="dropDown" maxHeight="150" minHeight="150" minWidth="150" maxWidth="150" >
        
            <!--- @private -->
            <s:RectangularDropShadow id="dropShadow" blurX="20" blurY="20" alpha="0.45" distance="7" 
                 angle="90" color="#000000" left="0" top="0" right="0" bottom="0"/>
        
            <!--- @private -->
            <s:Rect id="border" left="0" right="0" top="0" bottom="0">
                <s:stroke>
                    <!--- border stroke @private -->
                    <s:SolidColorStroke id="borderStroke" weight="1"/>
                </s:stroke>
            </s:Rect>
            
            <!-- fill -->
            <!--- Defines the appearance of drop-down list's background fill. -->
            <s:Rect id="background" left="1" right="1" top="1" bottom="1" >
                <s:fill>
                <!---  
                    The color of the drop down's background fill.
                    The default color is 0xFFFFFF.
                -->
                    <s:SolidColor id="bgFill" color="0xFFFFFF" />
                </s:fill>
            </s:Rect>
			<s:Group id="datechooser" left="0" top="0" right="0" bottom="0" >
				<s:layout>
					<s:VerticalLayout gap="0" />
				</s:layout>
				<s:Group left="0" right="0">
					<s:layout>
						<s:HorizontalLayout />
					</s:layout>
					<s:Button label="&lt;" click="prevMonth()" width="30" />
					<s:Label id="current" left="30" right="30"/>
					<s:Button label="&gt;" click="nextMonth()" width="30" right="0" />
				</s:Group>
				<s:Label text="S   M   T   W    Th   F   S" />				
            
                <!--- @copy spark.components.SkinnableDataContainer#dataGroup-->
                <s:DataGroup id="dataGroup" >
    				<s:layout>
    					<s:TileLayout requestedColumnCount="7" requestedRowCount="6"/>
    				</s:layout>
    				<s:itemRenderer>
    					<fx:Component>
    						<s:ItemRenderer>
    							<s:Label id="labelDisplay" 
    									 text="{data.dateLabel}" 
    									 color="{data.currentMonth ? 0 : 0x808080}" />
    						</s:ItemRenderer>
    					</fx:Component>
    				</s:itemRenderer>
                </s:DataGroup> 
            </s:Group>
        </s:Group>
    </s:PopUpAnchor>
    
    <!---  The default skin is DropDownListButtonSkin. 
            @copy spark.components.supportClasses.DropDownListBase#openButton
            @see spark.skins.spark.DropDownListButtonSkin -->
    <s:Button id="openButton" left="0" right="0" top="0" bottom="0" focusEnabled="false"
        skinClass="DateFieldListButtonSkin" />  
        
    <!--- @copy spark.components.DropDownList#labelDisplay -->
    <s:Label id="labelDisplay" verticalAlign="middle" maxDisplayedLines="1" 
        mouseEnabled="false" mouseChildren="false"
        left="7" right="30" top="2" bottom="2" width="75" verticalCenter="1" /> 

</s:SparkSkin>
