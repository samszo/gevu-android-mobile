<?xml version="1.0" encoding="utf-8"?>
<tr:Tree xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:tr="com.sparkTree.*"
		 xmlns:mx="library://ns.adobe.com/flex/halo"
		 xmlns:sqlite="com.peterelst.air.sqlite.*"
		 dataProvider="{testData}"
		 width="100%" height="100%" itemIdentifyField="treeid" allowItemDisSelection="false"
		 useVirtualLayout="false" dragEnabled="false" dropEnabled="false" labelField="label"
		 click="tree_clickHandler(event)"
		 >	
	
	<fx:Declarations>
		<sqlite:SQLite id="db" file="gevu_mobile.db" open="tree_query.execute()" />
		<sqlite:Query id="tree_query" connection="{db.connection}" 
					  sql="SELECT node.lib, node.id_lieu, node.lieu_parent,node.lft,node.rgt
					  FROM gevu_lieux AS node,
					  gevu_lieux AS parent
					  WHERE node.lft BETWEEN parent.lft AND parent.rgt
					  GROUP BY node.id_lieu
					  ORDER BY node.lft"
					  result="onSelectResult()" />
		
		<sqlite:Query id="form_query" connection="{db.connection}"
					  sql="SELECT l.lib, l.id_lieu, a.id_antenne, b.id_batiment,c.id_geo,d.id_diag,e.id_doc,
					  f.id_espace,g.id_espace_ext,h.id_espace_int,i.id_etablissement,j.id_niveau,
					  k.id_objet_ext,m.id_objet_int,n.id_objet_voirie,o.id_observations,
					  p.id_parcelle,q.id_probleme,s.id_groupe,t.id_logement,u.id_local,v.id_part_commu
					  FROM gevu_lieux AS l
					  LEFT JOIN gevu_antennes AS a ON a.id_lieu = l.id_lieu
					  LEFT JOIN gevu_batiments AS b ON b.id_lieu = l.id_lieu
					  LEFT JOIN gevu_geos AS c ON c.id_lieu = l.id_lieu
					  LEFT JOIN gevu_diagnostics AS d ON d.id_lieu = l.id_lieu
					  LEFT JOIN gevu_docsxlieux AS e ON e.id_lieu = l.id_lieu
					  LEFT JOIN gevu_espaces AS f ON f.id_lieu = l.id_lieu
					  LEFT JOIN gevu_espacesxexterieurs AS g ON g.id_lieu = l.id_lieu
					  LEFT JOIN Gevu_espacesxinterieurs AS h ON h.id_lieu = l.id_lieu
					  LEFT JOIN Gevu_etablissements AS i ON i.id_lieu = l.id_lieu
					  LEFT JOIN Gevu_niveaux AS j ON j.id_lieu = l.id_lieu
					  LEFT JOIN Gevu_objetsxexterieurs AS k ON k.id_lieu = l.id_lieu
					  LEFT JOIN Gevu_objetsxinterieurs AS m ON m.id_lieu = l.id_lieu
					  LEFT JOIN Gevu_objetsxvoiries AS n ON n.id_lieu = l.id_lieu
					  LEFT JOIN Gevu_observations AS o ON o.id_lieu = l.id_lieu
					  LEFT JOIN Gevu_parcelles AS p ON p.id_lieu = l.id_lieu
					  LEFT JOIN Gevu_problemes AS q ON q.id_lieu = l.id_lieu
					  LEFT JOIN Gevu_groupes AS s ON s.id_lieu = l.id_lieu
					  LEFT JOIN Gevu_logements AS t ON t.id_lieu = l.id_lieu
					  LEFT JOIN Gevu_locaux AS u ON u.id_lieu = l.id_lieu
					  LEFT JOIN Gevu_partiescommunes AS v ON v.id_lieu = l.id_lieu
					  where l.id_lieu ={this.selected_id} 
					  GROUP BY l.id_lieu
					  ORDER BY l.id_lieu ;" 
					  result="form_query_resultHandler(event)"/>
		
		<sqlite:Query id="get_lieu_info" connection="{db.connection}"
					  sql="select * from gevu_lieux where id_lieu={this.selected_id}"
					  result="get_lieu_info_resultHandler(event)"
					  />
		
		
	                        <!-- THE PARENT HAS CHILDS-->	
		<sqlite:Query id="update_rgt_has_child" connection="{db.connection}"
					  sql="update gevu_lieux set rgt = rgt + 2 WHERE rgt > {this.selected_rgt}"  />
		
		<sqlite:Query id="update_lft_has_child" connection="{db.connection}"
					  sql="update gevu_lieux SET lft = lft + 2 WHERE lft > {this.selected_rgt}" />
		
		<sqlite:Query id="insert_has_child" connection="{db.connection}" 
					  sql="insert into gevu_lieux (id_rubrique,lib,id_parent,id_instant,lft,rgt,niv,maj,lieu_parent)
					       values(0,'test',0,0,
					             {this.selected_rgt + 1},
					             {this.selected_rgt + 2},
					             {this.selected_niv + 1},
					              '2012-03-18 20:42:30',
					             {this.selected_id})" />
			<!-- ************************************************************* -->
					  
					  
		
		                     <!-- THE PARENT Does not have CHILDS-->	
		<sqlite:Query id="update_rgt_no_child" connection="{db.connection}"
					  sql="update gevu_lieux set rgt = rgt + 2 WHERE rgt > {this.selected_lft}"/>
		
		<sqlite:Query id="update_lft_no_child" connection="{db.connection}"
					  sql="update gevu_lieux SET lft = lft + 2 WHERE lft > {this.selected_lft}"/>
		
		<sqlite:Query id="insert_no_child" connection="{db.connection}" 
					  sql="insert into gevu_lieux (id_rubrique,lib,id_parent,id_instant,lft,rgt,niv,maj,lieu_parent)
					  values(0,'test',0,0
					  {this.selected_lft + 1},
					  {this.selected_lft + 2},
					  {this.selected_niv + 1},
					  '2012-03-18 20:42:30',
					  {this.selected_id})" />
		<!-- ********************************************************* -->
		
			
		
		<s:ArrayCollection id="testData" />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.sparkTree.TreeEvent;
			
			import flash.display.DisplayObject;
			import flash.net.dns.SRVRecord;
			import flash.sampler.NewObjectSample;
			import flash.utils.getDefinitionByName;
			
			import mx.core.FlexGlobals;
			import mx.core.IVisualElement;
			
			import spark.components.Application;
			import spark.components.Button;
			import spark.events.IndexChangeEvent;
			import spark.events.ListEvent;
			
			import views.*;
            
			gevu_antennes;
			gevu_batiments;
			gevu_espacesxexterieurs;
			gevu_espacesxinterieurs;
			gevu_groupes;
			gevu_locaux;
			gevu_logements;
			gevu_niveaux;
			gevu_objetsxexterieurs;
			gevu_objetsxinterieurs;
			gevu_parcelles;
			gevu_partiescommunes;
			
			[Bindable] private var selected_id:int;
			[Bindable] private var selected_lft:int;
			[Bindable] private var selected_rgt:int;
			[Bindable] private var selected_niv:int;
			[Bindable] private var lieu_info:Array=new Array;
			[Bindable] private var t:Date=new Date;
			
	
						
			/* 
			 * This function is responsible for
             * Building the tree			
             */	
			private function onSelectResult():void {
				var res:ArrayCollection=new ArrayCollection(tree_query.data);
				var parents:Array = new Array;
				testData.disableAutoUpdate();
				testData.removeAll();
				
				for(var i:int=0;i<res.length;i++)
				{
					if (res.getItemAt(i).rgt != res.getItemAt(i).lft +1) //==>this is a parent node
					{	 
						parents[i] = new DiskGroup(res.getItemAt(i).lib,res.getItemAt(i).id_lieu);
						if( ! parents[i].children ) parents[i].children = new ArrayCollection();
						var parent_id:int=res.getItemAt(i).lieu_parent;
						if(parent_id>0)
						{
						for (var j:int=0;j<parents.length;j++)
							if(parents[j]!=null)
							if(parent_id==parents[j].getID)
							parents[j].children.addItem(parents[i]);	
						}
						
					}//it is a parent node
					else{
						var leaf:Disk= new Disk(res.getItemAt(i).lib,res.getItemAt(i).id_lieu)
						var leaf_parent_id:int=res.getItemAt(i).lieu_parent;
						for (var k:int=0;k<parents.length;k++) 
						  if(parents[k]!=null)
							if(leaf_parent_id==parents[k].getID)
								parents[k].children.addItem(leaf);	
					  }	// it is a leaf
					}//for loop
				
				   testData.addItem(parents[0]);	 	
                   testData.enableAutoUpdate();              		
			}
	
			
			protected function tree_clickHandler(event:MouseEvent):void
			{
			 selected_id=event.currentTarget.selectedItem.source.getID;
			 form_query.execute();
			 }
			
			
		    
			protected function form_query_resultHandler(event:SQLEvent):void
			{
			 var form_res:ArrayCollection= new ArrayCollection(form_query.data);
			 var ids:Array = getForms(form_res);
			 var className:String;
			 var ClassReference:Class;
			 var instance:Object;
			 //these references are added for the compiler to 
			 // have a refernce and execute the getDefinitionByName()
			 //methode and if not, an : variable not found error will happen
			 
			 
			 //removing all interfaces
			  if (FlexGlobals.topLevelApplication.main_interface.numChildren>0)
				  for (var j:int=0;j<FlexGlobals.topLevelApplication.main_interface.numChildren;j++)
					  FlexGlobals.topLevelApplication.main_interface.removeElementAt(j);
			  
			  for (var k:int=0;k<ids.length;k++)
			  {
				  
				 className= "views."+ids[k];
				 if(
					 className == 'views.gevu_antennes'  ||
					 className == 'views.gevu_batiments' ||
				     className == 'views.gevu_diagnostics' ||
					 className == 'views.gevu_docsxlieux' ||
					 className == 'views.gevu_espaces' ||
					 className == 'views.gevu_espacesxexterieurs' ||
					 className == 'views.gevu_espacesxinterieurs' ||
					 className == 'views.gevu_etablissements' ||
					 className == 'views.gevu_niveaux' ||
					 className == 'views.gevu_objetsxexterieurs' ||
					 className == 'views.gevu_objetsxinterieurs' ||
					 className == 'views.gevu_objetsxvoiries' ||
					 className == 'views.gevu_observations' ||
				     className == 'views.gevu_parcelles' ||
					 className == 'views.gevu_problemes' ||
					 className == 'views.gevu_groupes' ||
					 className == 'views.gevu_logements' ||
					 className == 'views.gevu_locaux' ||
				     className == 'views.gevu_partiescommunes')
				 {
				 ClassReference = getDefinitionByName(className) as Class;
				 instance = new ClassReference();
				 instance.set_selected_id(selected_id);
				 FlexGlobals.topLevelApplication.main_interface.addElement(instance);
				 }
			  }
			}//function
			
			
			
			public function getForms(info:ArrayCollection):Array{
				var compo:Array = new Array;
				var i:int=0 ;
				
				//there is a way to change this.
				if (info.getItemAt(0).id_antenne !=null) {
					compo[i] = "gevu_antennes";
					i++;
				}
				
				if (info.getItemAt(0).id_batiment !=null) {
					compo[i] = "gevu_batiments";
					i++;
				}
				/*
				if (info.getItemAt(0).id_geo !=null) {
					compo[i] = "id_geo";
					i++;
				}*/
				
				if (info.getItemAt(0).id_diag !=null) {
					compo[i] = "gevu_diagnostics";
					i++;
				}
				
				if (info.getItemAt(0).id_doc !=null) {
					compo[i] = "gevu_docsxlieux";
					i++;
				}
				
				if (info.getItemAt(0).id_espace !=null) {
					compo[i] = "gevu_espaces";
					i++;
				}
				
				if (info.getItemAt(0).id_espace_ext !=null) {
					compo[i] = "gevu_espacesxexterieurs";
					i++;
				}
				
				if (info.getItemAt(0).id_espace_int !=null) {
					compo[i] = "gevu_espacesxinterieurs";
					i++;
				}
				
				if (info.getItemAt(0).id_etablissement !=null) {
					compo[i] = "gevu_etablissements";
					i++;
				}
				
				
				if (info.getItemAt(0).id_niveau !=null) {
					compo[i] = "gevu_niveaux";
					i++;
				}
				
				if (info.getItemAt(0).id_objet_ext !=null) {
					compo[i] = "gevu_objetsxexterieurs";
					i++;
				}
				
				if (info.getItemAt(0).id_objet_int !=null) {
					compo[i] = "gevu_objetsxinterieurs";
					i++;
				}
				
				if (info.getItemAt(0).id_objet_voirie !=null) {
					compo[i] = "gevu_objetsxvoiries";
					i++;
				}
				
				if (info.getItemAt(0).id_observations !=null) {
					compo[i] = "gevu_observations";
					i++;
				}
				
				if (info.getItemAt(0).id_parcelle !=null) {
					compo[i] = "gevu_parcelles";
					i++;
				}
				
				if (info.getItemAt(0).id_probleme !=null) {
					compo[i] = "gevu_problemes";
					i++;
				}
				
				if (info.getItemAt(0).id_groupe !=null) {
					compo[i] = "gevu_groupes";
					i++;
				}
				
				if (info.getItemAt(0).id_logement !=null) {
					compo[i] = "gevu_logements";
					i++;
				}
				
				if (info.getItemAt(0).id_local !=null) {
					compo[i] = "gevu_locaux";
					i++;
				}
				
				if (info.getItemAt(0).id_part_commu !=null) {
					compo[i] = "gevu_partiescommunes";
					i++;
				}
				return compo;
			}
			
			protected function get_lieu_info_resultHandler(event:SQLEvent):void
			{
			  this.lieu_info=this.get_lieu_info.data;
			  this.selected_lft=lieu_info[0].lft;
			  this.selected_rgt=lieu_info[0].rgt;
			  this.selected_niv=lieu_info[0].niv;
			  //adding event listners
			  this.update_lft_has_child.addEventListener(SQLErrorEvent.ERROR,onerror);
			  this.update_rgt_has_child.addEventListener(SQLErrorEvent.ERROR,onerror);
			  this.insert_has_child.addEventListener(SQLErrorEvent.ERROR,onerror);
			  this.update_lft_no_child.addEventListener(SQLErrorEvent.ERROR,onerror);
			  this.update_rgt_no_child.addEventListener(SQLErrorEvent.ERROR,onerror);
			  this.insert_no_child.addEventListener(SQLErrorEvent.ERROR,onerror);
			  this.tree_query.addEventListener(SQLErrorEvent.ERROR,onerror);
				if (this.selected_rgt != this.selected_lft +1)
				{	
				this.update_lft_has_child.execute();
				this.update_rgt_has_child.execute();
				this.insert_has_child.execute();
				
				
				}//parent
				
				else
				{
				 this.update_lft_no_child.execute();
				 this.update_rgt_no_child.execute();
				 this.insert_no_child.execute();
				}//not parent
				this.tree_query.execute();
			}
					
			public function onerror(e:SQLErrorEvent):void{
             trace(e.error);				
			}
		]]>	
	</fx:Script>
</tr:Tree>
